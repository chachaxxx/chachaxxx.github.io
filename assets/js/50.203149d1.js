(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{763:function(t,e,s){"use strict";s.r(e);var a=s(1),l=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("类别")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Sass")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("less")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("环境")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("dart或其他")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("基于javascript，可以运行在 Node 或浏览器端")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("使用")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("复杂")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("简单(相对而言)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("功能")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("复杂")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("简单(相对而言)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("处理机制")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("服务端处理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以运行在 Node 或浏览器端")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("变量")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("以 $ 开头")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("以 @ 开头")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("文件后缀")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v(".sass 或. scss")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v(".less")])])])]),t._v(" "),s("p",[t._v("Sass 的主版本现在已经改用 Dart 实现了，Ruby 的版本一年前就不再维护了。Sass 和 Less 的使用并没有明显的「复杂」和「简单」的区别，常用部分大同小异。Less 运行在浏览器端只是方便初学者上手，生产环境是绝对不会这么做的，都是随着前端项目一起构建，构建完之后的都是静态资源，不涉及服务端什么事。两者都有线上的 REPL，所以简单的演示代码不用担心用不了 Sass。Sass 以 $ 打头比较不容易和 CSS 标准语法冲突，Less 的语法跟 CSS 标准太像了，有时候会难以区分（Stylus 更糟糕）。Sass 和 Less 的变量机制有很大的不同，Sass 是类似 JS 的块级作用域一样，可以在作用域内重新赋值而不影响外部，Less 是以全局的最后一次赋值为准，这也是为什么大部分 UI 组件库都选择 Less。")])])}),[],!1,null,null,null);e.default=l.exports}}]);